package wordcount;
import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.IntWritable.Comparator;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.LongWritable.DecreasingComparator;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.io.WritableComparator;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

public class WordCount {

	//1st MapReduce : 기존의 WordCount

	public static class TokenizerMapper
	extends Mapper<Object, Text, Text, IntWritable>{

		private final static IntWritable one = new IntWritable(1);
		private Text word = new Text();

		public void map(Object key, Text value, Context context
				) throws IOException, InterruptedException {
			StringTokenizer itr = new StringTokenizer(value.toString());
			while (itr.hasMoreTokens()) {
				word.set(itr.nextToken());
				context.write(word, one);
			}
		}
	}

	public static class IntSumReducer
	extends Reducer<Text,IntWritable,Text,IntWritable> {
		private IntWritable result = new IntWritable();
		private IntWritable middle_result = new IntWritable();

		public void reduce(Text key, Iterable<IntWritable> values,
				Context context
				) throws IOException, InterruptedException {
			
			int sum = 0;
			
			for (IntWritable val : values) {
				sum += val.get();
			}
			result.set(sum);
			
			context.write(key, result);
		}
	}

	//2번째 맵.
	public static class MyMapper
	extends Mapper<Text, IntWritable, IntWritable, Text>{
		private Text word = new Text();
		private IntWritable num = new IntWritable();

		public void map(Text key, IntWritable value, Context context
				) throws IOException, InterruptedException {

			// shuffling & sorting 단계에서 정렬은 key값을 중심으로,
			// 오름차순으로 이루어지기 때문에, 기존에 (word, count)로 되어있던 것을
			// (-1 * count, word) 로 바꾼다. 

			int val = value.get(); 
			num.set(-1 * val); 
			context.write(num, key); 
		}
	}

	public static class MyReducer
	extends Reducer<IntWritable, Text, Text, IntWritable> {
		private IntWritable num = new IntWritable();
		
		public void reduce(IntWritable key, Iterable<Text> values,
				Context context
				) throws IOException, InterruptedException {
			
			for (Text value : values) {
				// map의 결과가 (-1 * count, word) 형태이므로,
				// (word, count) 형태로 바꾸어서 다시 출력해야한다.
				// reduce의 입력은 shuffling & sorting 을 거친 상태이므로,
				// -1 * count 값을 기준으로 오름차순 정렬이 되어있다.
				// 즉, count 값을 기준으로 내림차순이 되어있는 것이다.

				int val = key.get();
				num.set(-1 * val);
				context.write(value, num);
			}
		}
	}

	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf, "word count");
		job.setJarByClass(WordCount.class);
		job.setMapperClass(TokenizerMapper.class);
		job.setCombinerClass(IntSumReducer.class);
		job.setReducerClass(IntSumReducer.class);

		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		job.setOutputFormatClass(SequenceFileOutputFormat.class);

		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		job.waitForCompletion(true);
		

		Configuration conf2 = new Configuration();
		Job job2 = Job.getInstance(conf, "wordcount2");
		job2.setJarByClass(WordCount.class);
		job2.setMapperClass(MyMapper.class);
		job2.setReducerClass(MyReducer.class);
		//job2.setNumReduceTasks(0);

		job2.setInputFormatClass(SequenceFileInputFormat.class);
		job2.setOutputFormatClass(TextOutputFormat.class);
		job2.setOutputKeyClass(IntWritable.class);
		job2.setOutputValueClass(Text.class); 
		
		FileInputFormat.addInputPath(job2, new Path(args[1]));
		FileOutputFormat.setOutputPath(job2, new Path(args[2]));
		job2.waitForCompletion(true);

	}
}